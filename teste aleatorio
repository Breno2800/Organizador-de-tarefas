const express = require('express')
const app = express()
const handlebars = require('express-handlebars')
const bodyParser = require('body-parser')
const path = require('path')
const mongoose = require('mongoose')
const rota1 = require('./routes/rota1')
const session = require('express-session')
const flash = require('connect-flash')







app.engine('handlebars', handlebars({defaultLayout: 'index'}))
app.set('view engine', 'handlebars')


app.use(express.static(path.join(__dirrname + 'public')))
app.use(express.static(path.join('public/css')))

app.use(bodyParser.urlencoded({extended: true}))
app.set(bodyParser.json)



mongoose.Promise = global.Promise
mongoose.connect('mongodb://localhost/organizador').then(() =>{
    console.log('conectado ao servidor')
}).catch((err) => {
    console.log('erro ao se conectar')
})





app.use('/rota1', rota1 )

const PORT = 3031
app.listen(PORT, ( )=> {
    console.log('servidor rodando')
})




app.use('/rota1', rota1)

const PORT = 3031
app.listen(PORT, ( ) => {
    console.log('servidor rodando')
})



app.use(session({
    secret: "breno1804",
    resave: true,
    saveUninitialized: true
}))

app.use(flash())

//midleware
    app.use((req, res, next) => {
        res.locals.success_msg = req.flash("success_msg")
        res.locals.error_msg = req.flash("error_msg")
        next()
    })

app.use(session({
    secret: "189.662.627-08"
    resave: true,
    saveUnitialized: true
}))

app.use(flash())

app.use((req, res, next) => {
    res.locals.sucess_msg = req.flash('sucess_msg')
    res.locals.error_msg = req.flash('error_msg')
    next()
}) 



npm install --save express
npm i
npm init  
npm install consign --save  
npm install handlebars --save  
npm instal bodyParser 
npm install path 
npm install mongoose
npm install express-session
npm install connect-flash
npm install nodemon



const mongoose = require('mongoose')
const Schema = mongoose.Schema;

const Categoria = new Schema ({
    email: {
        type: String,
        required: true
    },
    opção1: {
        type: Number,
    
    },
    opção2: {
        type: Number, 
        
    },
    texto: {
        type: String,
        required: true
    }
})

mongoose.model('categorias', Categoria)


const express = require('express')
const app = express()
const handlebars = require('express-handlebars')
const bodyParser = require('body-parser')
const path = require('path')
const mongoose = require('mongoose')
const rota1 = require('./routes/rota1')
const session = require('express-session')
const flash = require('connect-flash')



const express = require('express')
const app = express()
const handlebars = require('express-handlebars')
const bodyParser = require('bodyParser')
const path = require('path')
const mongoose = require('mongoose')
const rota1 = require('./routes/rota1')
const rotaBlog = require('routes/rotaBlog')



const mongoose = require('mongoose')
const express = express 
const router = express.router()
const blogger = require('./models/blogModel')


router.get('/inicio', (req, res) => {
    res.render('layouts/index.handlebars')
})

router.post('/entrarBlog', (req, res) {

erros = []

if(!req.body.nome || req.body.nome == undefined || req.body.nome == null){
    erros.push({texto: 'nome muito peuqueno'})
}else{
    const novoBlogger = {
        nome = req.body.nome,
        email = req.body.email
    }
    new blogger(novoBlogger).save()
}

const express = require('express')
const app = express()
const handlebars = require('express-handlebars')
const bodyParser = require('body-parser')
const path = require('path')
const mongoose = require('mongoose')
const rota1 = require('./routes/rota1')
const session = require("express-session")
const flash = require("connect-flash")




